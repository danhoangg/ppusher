function r(r) {
  return r && typeof r === "object" && "default" in r ? r : { default: r };
}
const e = /* #__PURE__ */ r(require("axios"));

const t = function (r) {
  return new Promise((t, n) => {
    if (!r) return n(Error("Stock symbol required"));
    if (typeof r !== "string")
      return n(
        Error(`Invalid argument type. Required: string. Found: ${typeof r}`)
      );
    const o = `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${r}`;
    const i =
      typeof window !== "undefined"
        ? `https://thingproxy.freeboard.io/fetch/${o}`
        : o;
    return e.default
      .get(i, { headers: { "Content-Type": "application/json" } })
      .then((e) => {
        const o = e.data;
        return o &&
          o.quoteResponse &&
          o.quoteResponse.result &&
          o.quoteResponse.result.length !== 0
          ? t(o.quoteResponse.result[0])
          : n(Error(`Error retrieving info for symbol ${r}`));
      })
      .catch((r) => n(r));
  });
};

(exports.getSingleStockInfo = t),
  (exports.getStocksInfo = function (r) {
    return new Promise((e, n) => {
      if (!r) return n(Error("Stock symbol list required"));
      if (!Array.isArray(r))
        return n(Error("Invalid argument type. Array required."));
      const o = [].concat(r);
      if (!o.length || o.length < 1) return Promise.resolve([]);
      const i = o.map(t);
      return e(Promise.all(i));
    });
  });
// # sourceMappingURL=index.js.map
