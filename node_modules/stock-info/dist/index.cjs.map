{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { Stock } from \"./types\";\nexport { Stock } from \"./types\";\n\nimport axios from \"axios\";\n\nexport const getSingleStockInfo = (stock: string): Promise<Stock> =>\n  new Promise((resolve, reject) => {\n    if (!stock) {\n      return reject(Error(\"Stock symbol required\"));\n    }\n    if (typeof stock !== \"string\") {\n      return reject(\n        Error(`Invalid argument type. Required: string. Found: ${typeof stock}`)\n      );\n    }\n\n    const url = `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${stock}`;\n    const proxy = \"https://thingproxy.freeboard.io/fetch/\";\n\n    const finalURL = typeof window !== \"undefined\" ? proxy + url : url;\n\n    return axios\n      .get(finalURL, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        const { data } = res;\n        if (\n          !data ||\n          !data.quoteResponse ||\n          !data.quoteResponse.result ||\n          data.quoteResponse.result.length === 0\n        ) {\n          return reject(Error(`Error retrieving info for symbol ${stock}`));\n        }\n        return resolve(data.quoteResponse.result[0]);\n      })\n      .catch((err) => reject(err));\n  });\n\nexport const getStocksInfo = (stockList: string[]): Promise<Stock[]> =>\n  new Promise((resolve, reject) => {\n    if (!stockList) {\n      return reject(Error(\"Stock symbol list required\"));\n    }\n    if (!Array.isArray(stockList)) {\n      return reject(Error(\"Invalid argument type. Array required.\"));\n    }\n\n    const list = [...stockList];\n    if (!list.length || list.length < 1) {\n      return Promise.resolve([]);\n    }\n\n    const promises = list.map(getSingleStockInfo);\n    return resolve(Promise.all(promises));\n  });\n"],"names":["getSingleStockInfo","stock","Promise","resolve","reject","Error","url","finalURL","window","axios","get","headers","then","res","data","quoteResponse","result","length","err","stockList","Array","isArray","list","promises","map","all"],"mappings":"+GAKaA,EAAqB,SAACC,cAC7BC,QAAQ,SAACC,EAASC,GACpB,IAAKH,EACH,OAAOG,EAAOC,MAAM,0BAEtB,GAAqB,iBAAVJ,EACT,OAAOG,EACLC,gEAAgEJ,IAIpE,IAAMK,+DAAmEL,EAGnEM,EAA6B,oBAAXC,OAFV,yCAE2CF,EAAMA,EAE/D,OAAOG,UACJC,IAAIH,EAAU,CACbI,QAAS,CACP,eAAgB,sBAGnBC,KAAK,SAACC,GACL,IAAQC,EAASD,EAATC,KACR,OACGA,GACAA,EAAKC,eACLD,EAAKC,cAAcC,QACiB,IAArCF,EAAKC,cAAcC,OAAOC,OAIrBd,EAAQW,EAAKC,cAAcC,OAAO,IAFhCZ,EAAOC,0CAA0CJ,YAIrD,SAACiB,UAAQd,EAAOc,2DAGA,SAACC,cACxBjB,QAAQ,SAACC,EAASC,GACpB,IAAKe,EACH,OAAOf,EAAOC,MAAM,+BAEtB,IAAKe,MAAMC,QAAQF,GACjB,OAAOf,EAAOC,MAAM,2CAGtB,IAAMiB,YAAWH,GACjB,IAAKG,EAAKL,QAAUK,EAAKL,OAAS,EAChC,OAAOf,QAAQC,QAAQ,IAGzB,IAAMoB,EAAWD,EAAKE,IAAIxB,GAC1B,OAAOG,EAAQD,QAAQuB,IAAIF"}